.globl __start

.text
	__start:
    	li x4, 0x00000000
        lb x8, 100(x4)		# считываем 8-битное число (размер массива)
	li x10, 168
	begin:
    	addi x4, x4, 4		# тут возможно нужно прибавлять 4
        lh x1, 100(x4)		# считываем поочередно элементы массива x2 раз
        j function		# и применяем к каждому из них функцию
    back:
        sh x7, 0(x10)		# записываем результат в отдельный массив
	addi x10, x10, 1 
        addi x8, x8, -1		# reg[8] <- reg[8] - 1
        bne x8, x0, begin	# if(reg[8] != reg[0]) begin
        j exit
    function:
        li x2, 3			# uint16_t b = 3;
        li x3, 0			# uint16_t c;
        li x5, 0			# int start = 0;
        li x6, 10			# int end = 9;
        li x7, 0			# int count = 0;
    loop:
        and x3, x2, x1		# c = a & b;
        bne x3, x2, con		# if (c != b)
        addi x7, x7, 1		# count = count + 1;
    con:
        slli x2, x2, 1		# b = b << 1;
        addi x5, x5, 1		# start = start + 1;
        blt x5, x6, loop	# if (start < end)
        j back
    exit:
        tail exit